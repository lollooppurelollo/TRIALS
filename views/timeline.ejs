<!DOCTYPE html>
<html lang="it">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Timeline Studio</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    :root{
      --color-sage:#9baf93;
      --color-light-sage:#c7d2c1;
      --color-dark-sage:#6c7e63;
      --color-dark-gray:#4a5568;
      --color-blue:#bfdbfe;        /* radiology */
      --color-orange:#fdba74;      /* therapy */
      --color-gray:#e5e7eb;        /* custom */
      --color-light-red:#fecaca;   /* blood test */
    }
    .bg-sage{background-color:var(--color-sage)}
    .bg-light-sage{background-color:var(--color-light-sage)}
    .bg-dark-sage{background-color:var(--color-dark-sage)}
    .text-dark-gray{color:var(--color-dark-gray)}
    .hover\:bg-dark-sage:hover{background-color:var(--color-dark-sage)}

    /* chip colori evento */
    .chip{font-size:.75rem; line-height:1; padding:.25rem .5rem; border-radius:.375rem; display:inline-block; white-space:nowrap}
    .chip-oncological_visit{background:var(--color-dark-sage); color:#fff}
    .chip-blood_test{background:var(--color-light-red); color:#7f1d1d}
    .chip-radiology{background:var(--color-blue); color:var(--color-dark-gray)}
    .chip-therapy{background:var(--color-orange); color:var(--color-dark-gray)}
    .chip-custom{background:var(--color-gray); color:var(--color-dark-gray)}

    /* sfumatura finestra ± giorni (ora con chip più chiari) */
    .chip-win{opacity:0.4}

    /* celle calendario */
    .daycell{min-height:60px; border-radius:.5rem; border:1px solid #e5e7eb; display:flex; align-items:center; justify-content:center; padding:.25rem; cursor:pointer}
    .daycell:hover{outline:2px solid var(--color-light-sage)}
    .daycell.selected{outline:3px solid var(--color-sage)}
    .daycell-stack{display:flex; gap:.25rem; flex-wrap:wrap; justify-content:center}
    .weeklabel{width:5rem; font-size:.75rem; color:#6b7280; display:flex; align-items:center; justify-content:center}

    /* card evento */
    .event-card{border:1px solid #e5e7eb; border-left-width:8px; border-radius:.75rem; background:#fff; padding:.75rem 1rem}
    .event-left-oncological_visit{border-left-color:var(--color-dark-sage)}
    .event-left-blood_test{border-left-color:var(--color-light-red)}
    .event-left-radiology{border-left-color:var(--color-blue)}
    .event-left-therapy{border-left-color:var(--color-orange)}
    .event-left-custom{border-left-color:var(--color-gray)}
  </style>
</head>
<body class="bg-gray-100 text-gray-800">

<!-- Header -->
<div class="bg-white p-6 rounded-xl shadow-md mb-6">
  <div class="flex items-start justify-between gap-4 flex-wrap">
    <div>
      <h1 class="text-2xl font-bold text-dark-sage">Timeline Studio</h1>
      <p class="text-gray-600 text-sm">Gestione degli eventi per lo studio selezionato.</p>
    </div>
    <div class="text-sm">
      <div class="flex items-center gap-2 flex-wrap">
        <span class="chip chip-oncological_visit">Visita oncologica</span>
        <span class="chip chip-blood_test">Esami ematici</span>
        <span class="chip chip-radiology">Radiologia</span>
        <span class="chip chip-therapy">Terapia</span>
        <span class="chip chip-custom">Custom</span>
      </div>
    </div>
  </div>
</div>

<!-- Controlli timeline -->
<div class="bg-white p-4 rounded-xl shadow-md mb-6">
  <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
    <div>
      <label class="block text-sm font-medium text-dark-gray">Settimane totali</label>
      <input id="tlTotalWeeks" type="number" min="4" max="104" value="24"
             class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-light-sage">
    </div>
    <div>
      <label class="block text-sm font-medium text-dark-gray">Settimane per blocco</label>
      <input id="tlBlockSize" type="number" min="1" max="12" value="4"
             class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-light-sage">
    </div>
    <div class="flex items-end">
      <button id="tlRefreshBtn"
              class="w-full bg-sage text-white font-semibold px-4 py-2 rounded-lg hover:bg-dark-sage transition-colors shadow-md">
        Aggiorna
      </button>
    </div>
  </div>
</div>

<!-- Layout 2 colonne -->
<div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
  <!-- Timeline -->
  <section class="bg-white p-4 rounded-xl shadow-md">
    <h2 class="text-lg font-bold text-dark-gray mb-3">Timeline</h2>
    <div id="tlTimeline" class="space-y-4"></div>
  </section>

  <!-- Piano Eventi + Form -->
  <section class="space-y-6">
    <!-- Piano eventi -->
    <div class="bg-white p-4 rounded-xl shadow-md">
      <div class="flex items-center justify-between mb-3">
        <h2 class="text-lg font-bold text-dark-gray">Piano eventi</h2>
        <span id="tlNoEventsMsg" class="text-sm text-gray-500 hidden">Nessun evento salvato.</span>
      </div>
      <div id="tlEventsList" class="space-y-3"></div>
    </div>

    <!-- Form nuovo evento -->
    <div class="bg-white p-4 rounded-xl shadow-md">
      <h2 class="text-lg font-bold text-dark-gray mb-3">Aggiungi evento</h2>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
        <div class="md:col-span-2">
          <label class="block text-sm font-medium text-dark-gray">Tipo di evento</label>
          <select id="evType" class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-light-sage">
            <option value="oncological_visit">Visita oncologica</option>
            <option value="blood_test">Esami ematici</option>
            <option value="radiology">Esami radiologici</option>
            <option value="therapy">Terapia</option>
            <option value="custom">Evento personalizzato</option>
          </select>
        </div>

        <div class="md:col-span-2">
          <label class="block text-sm font-medium text-dark-gray">Titolo (opzionale)</label>
          <input id="evTitle" type="text" class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-light-sage">
        </div>

        <div class="md:col-span-2">
          <label class="block text-sm font-medium text-dark-gray">Note (opzionale)</label>
          <textarea id="evNotes" class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-light-sage"></textarea>
        </div>

        <div class="md:col-span-2">
          <label class="block text-sm font-medium text-dark-gray">Indicazioni (opzionale)</label>
          <textarea id="evIndications" class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-light-sage"></textarea>
        </div>

        <!-- toggle -->
        <div class="md:col-span-2 flex items-center gap-2">
          <input id="evOneShot" type="checkbox" class="rounded">
          <label for="evOneShot" class="text-sm text-dark-gray">Evento singolo</label>
          <span class="text-xs text-gray-400">(se non spuntato: evento ricorrente)</span>
        </div>

        <!-- singolo -->
        <div id="evSingleWrap" class="md:col-span-2 hidden">
          <div class="grid grid-cols-1 md:grid-cols-3 gap-3">
            <div>
              <label class="block text-sm font-medium text-dark-gray">Giorno (da inizio studio)</label>
              <input id="evAtDay" type="number" min="0" class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-light-sage">
              <p class="text-xs text-gray-500 mt-1">Suggerimento: clicca un giorno nel calendario per precompilare.</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-dark-gray">Finestra ± giorni (opz.)</label>
              <input id="evWindowDays" type="number" min="0" class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-light-sage">
            </div>
          </div>
        </div>

        <!-- ricorrente -->
        <div id="evRecurringWrap" class="md:col-span-2">
          <div class="grid grid-cols-1 md:grid-cols-4 gap-3">
            <div>
              <label class="block text-sm font-medium text-dark-gray">Ogni N giorni</label>
              <input id="evRepeatEveryDays" type="number" min="1" class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-light-sage">
            </div>
            <div>
              <label class="block text-sm font-medium text-dark-gray">Da giorno</label>
              <input id="evStartDay" type="number" min="0" class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-light-sage">
            </div>
            <div>
              <label class="block text-sm font-medium text-dark-gray">A giorno (opz.)</label>
              <input id="evStopDay" type="number" min="0" class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-light-sage">
            </div>
            <div>
              <label class="block text-sm font-medium text-dark-gray">Finestra ± giorni (opz.)</label>
              <input id="evWindowDaysR" type="number" min="0" class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-light-sage">
            </div>
          </div>
        </div>
      </div>

      <button id="evSaveBtn"
              class="mt-4 w-full bg-sage text-white font-semibold px-4 py-2 rounded-lg hover:bg-dark-sage transition-colors shadow-md">
        Salva evento
      </button>
    </div>
  </section>
</div>

<!-- Modale password -->
<div id="tlPasswordModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden items-center justify-center z-50">
  <div class="bg-white p-6 rounded-lg shadow-xl w-80">
    <h3 class="text-lg font-bold mb-4">Inserisci la password</h3>
    <input type="password" id="tlPasswordInput" class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-sage" />
    <p id="tlPasswordError" class="text-red-400 text-sm mt-2 hidden">Password errata.</p>
    <div class="flex justify-end mt-4 space-x-2">
      <button id="tlCancelPwdBtn" class="bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded-lg">Annulla</button>
      <button id="tlConfirmPwdBtn" class="bg-sage text-white font-bold py-2 px-4 rounded-lg">Conferma</button>
    </div>
  </div>
</div>

<script>
(() => {
  const STUDY_ID = "<%= typeof studyId !== 'undefined' ? studyId : '' %>";

  const chipClass = (t) => ({
    oncological_visit: "chip chip-oncological_visit",
    blood_test: "chip chip-blood_test",
    radiology: "chip chip-radiology",
    therapy: "chip chip-therapy",
    custom: "chip chip-custom",
  }[t] || "chip chip-custom");

  const titleByType = (t) => ({
    oncological_visit: "Visita oncologica",
    blood_test: "Esami ematici",
    radiology: "Esami radiologici",
    therapy: "Terapia",
    custom: "Evento",
  }[t] || "Evento");

  function eventTitle(ev) {
    return ev.title?.trim() ? ev.title : titleByType(ev.event_type);
  }

  const tlTimeline = document.getElementById("tlTimeline");
  const tlEventsList = document.getElementById("tlEventsList");
  const tlNoEventsMsg = document.getElementById("tlNoEventsMsg");
  const tlRefreshBtn = document.getElementById("tlRefreshBtn");

  const evType = document.getElementById("evType");
  const evTitle = document.getElementById("evTitle");
  const evNotes = document.getElementById("evNotes");
  const evIndications = document.getElementById("evIndications");
  const evOneShot = document.getElementById("evOneShot");
  const evAtDay = document.getElementById("evAtDay");
  const evWindowDays = document.getElementById("evWindowDays");
  const evRepeatEveryDays = document.getElementById("evRepeatEveryDays");
  const evStartDay = document.getElementById("evStartDay");
  const evStopDay = document.getElementById("evStopDay");
  const evWindowDaysR = document.getElementById("evWindowDaysR");
  const evSaveBtn = document.getElementById("evSaveBtn");

  const tlPwdModal = document.getElementById("tlPasswordModal");
  const tlPwdInput = document.getElementById("tlPasswordInput");
  const tlPwdError = document.getElementById("tlPasswordError");
  const tlCancelPwdBtn = document.getElementById("tlCancelPwdBtn");
  const tlConfirmPwdBtn = document.getElementById("tlConfirmPwdBtn");

  const evSingleWrap = document.getElementById("evSingleWrap");
  const evRecurringWrap = document.getElementById("evRecurringWrap");

  let _events = [];
  let _pendingAction = null;
  let _selectedDay = null;

  function showPwdModal(action) {
    _pendingAction = action;
    tlPwdInput.value = "";
    tlPwdError.classList.add("hidden");
    tlPwdModal.classList.remove("hidden");
    tlPwdModal.classList.add("flex");
  }
  function hidePwdModal() {
    tlPwdModal.classList.add("hidden");
    tlPwdModal.classList.remove("flex");
  }
  function runPendingAction(action) {
    if (action.type === "create") createEvent(action.payload);
    if (action.type === "delete") deleteEvent(action.payload.id);
    _pendingAction = null;
  }

  tlCancelPwdBtn.addEventListener("click", hidePwdModal);
  tlConfirmPwdBtn.addEventListener("click", () => {
    if (tlPwdInput.value === "TRIAL") {
      hidePwdModal();
      if (_pendingAction) runPendingAction(_pendingAction);
    } else {
      tlPwdError.classList.remove("hidden");
    }
  });

  function formatSummary(ev) {
    if (ev.one_shot) {
      const d = ev.at_day;
      if (d == null) return "Evento singolo";
      const w = Math.floor(d/7);
      const dow = (d % 7)+1;
      const wd = ev.window_days ? ` (±${ev.window_days}g)` : "";
      return `Giorno ${d} — Settimana ${w}, Giorno ${dow}${wd}`;
    } else {
      const sd = ev.start_day ?? 0;
      const ed = ev.stop_day ?? null;
      const rng = ed!=null ? `giorni ${sd}-${ed}` : `dal giorno ${sd}`;
      const wd = ev.window_days ? ` (±${ev.window_days}g)` : "";
      return `Ogni ${ev.repeat_every_days} giorni, ${rng}${wd}`;
    }
  }

  function renderEventsList() {
    tlEventsList.innerHTML = "";
    if (!_events.length) {
      tlNoEventsMsg.classList.remove("hidden");
      return;
    }
    tlNoEventsMsg.classList.add("hidden");
    _events.forEach(ev => {
      const card = document.createElement("div");
      card.className = `event-card event-left-${ev.event_type}`;
      card.innerHTML = `
        <div class="flex justify-between gap-3">
          <div>
            <div class="font-bold text-dark-gray">${eventTitle(ev)}</div>
            <div class="text-sm text-gray-600">${formatSummary(ev)}</div>
          </div>
          <button data-id="${ev.id}" class="tlDeleteBtn text-red-500 text-sm" title="Elimina">🗑️</button>
        </div>
        ${ev.notes ? `<div class="mt-1 text-sm text-gray-700">${ev.notes}</div>` : ""}
        ${ev.indications ? `<div class="mt-1 text-xs text-gray-500"><strong>Indicazioni:</strong> ${ev.indications}</div>` : ""}
      `;
      tlEventsList.appendChild(card);
    });
  }

  function makeSchedule(events, totalWeeks){
    const totalDays = totalWeeks*7;
    const byDay = new Map();
    const windows = new Map();
    const push = (map, key, value) => {
      if (key < 0 || key >= totalDays) return;
      const arr = map.get(key) || [];
      arr.push(value);
      map.set(key, arr);
    };
    events.forEach(ev=>{
      if (ev.one_shot) {
        const d = Number.isInteger(ev.at_day) ? ev.at_day : null;
        if (d!=null){
          push(byDay, d, ev);
          const win = parseInt(ev.window_days||0,10);
          if (win>0){
            for (let k=-win;k<=win;k++){
              if (k===0) continue;
              push(windows, d+k, ev);
            }
          }
        }
      } else {
        const startDay = Number.isInteger(ev.start_day) ? ev.start_day : 0;
        const stopDay = Number.isInteger(ev.stop_day) ? ev.stop_day : (totalDays-1);
        const step = Math.max(1, parseInt(ev.repeat_every_days||1,10));
        const win = parseInt(ev.window_days||0,10);
        for (let d=startDay; d<=stopDay; d+=step){
          push(byDay, d, ev);
          if (win>0){
            for (let k=-win;k<=win;k++){
              if (k===0) continue;
              push(windows, d+k, ev);
            }
          }
        }
      }
    });
    return {byDay, windows};
  }

  function renderTimeline() {
    const total = Math.max(4, parseInt(tlTotalWeeks.value || "24", 10));
    const blockSize = Math.max(1, parseInt(tlBlockSize.value || "4", 10));
    const {byDay, windows} = makeSchedule(_events, total);
    tlTimeline.innerHTML = "";
    for (let startW = 0; startW < total; startW += blockSize) {
      const endW = Math.min(total - 1, startW + blockSize - 1);
      const block = document.createElement("div");
      block.className = "rounded-lg border border-gray-200";
      const header = document.createElement("div");
      header.className = "px-4 py-2 bg-gray-50 rounded-t-lg";
      header.innerHTML = `<div class="font-semibold">Settimane ${startW}-${endW}</div>`;
      block.appendChild(header);
      const body = document.createElement("div");
      body.className = "p-3 space-y-2";
      const hdr = document.createElement("div");
      hdr.className = "grid grid-cols-8 gap-2";
      hdr.innerHTML = `
        <div class="dow"></div>
        ${[1,2,3,4,5,6,7].map(n=>`<div class="dow text-center">${n}</div>`).join("")}
      `;
      body.appendChild(hdr);
      for (let w=startW; w<=endW; w++){
        const row = document.createElement("div");
        row.className="grid grid-cols-8 gap-2 items-start";
        const wlab = document.createElement("div");
        wlab.className="weeklabel";
        wlab.textContent = `Settimana ${w}`;
        row.appendChild(wlab);
        for (let dow=0; dow<7; dow++){
          const dayIndex = w*7 + dow;
          const cell = document.createElement("div");
          cell.className = "daycell";
          cell.dataset.dayIndex = String(dayIndex);
          const stack = document.createElement("div");
          stack.className="daycell-stack";
          const items = byDay.get(dayIndex) || [];
          items.forEach(ev=>{
            const chip = document.createElement("span");
            chip.className = chipClass(ev.event_type);
            chip.textContent = eventTitle(ev);
            stack.appendChild(chip);
          });
          const wins = windows.get(dayIndex) || [];
          wins.forEach(ev=>{
            const chip = document.createElement("span");
            chip.className = chipClass(ev.event_type)+" chip-win";
            chip.textContent = eventTitle(ev);
            stack.appendChild(chip);
          });
          cell.appendChild(stack);
          row.appendChild(cell);
        }
        body.appendChild(row);
      }
      block.appendChild(body);
      tlTimeline.appendChild(block);
    }
    tlTimeline.querySelectorAll(".daycell").forEach(c=>{
      c.addEventListener("click", ()=>{
        tlTimeline.querySelectorAll(".daycell.selected").forEach(s=>s.classList.remove("selected"));
        c.classList.add("selected");
        _selectedDay = parseInt(c.dataset.dayIndex,10);
        evOneShot.checked = true;
        toggleMode();
        evAtDay.value = _selectedDay;
        evWindowDays.focus();
      });
    });
  }

  async function loadEvents() {
    if (!STUDY_ID) return;
    const res = await fetch(`/api/timeline/${STUDY_ID}`);
    if (!res.ok) return;
    _events = await res.json();
    renderEventsList();
    renderTimeline();
  }
  async function createEvent(ev) {
    const res = await fetch(`/api/timeline/${STUDY_ID}`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(ev),
    });
    if (!res.ok) {alert("Errore salvataggio");return;}
    evTitle.value = ""; evNotes.value = ""; evIndications.value = ""; evAtDay.value = ""; evWindowDays.value = "";
    evRepeatEveryDays.value = ""; evStartDay.value = ""; evStopDay.value = ""; evWindowDaysR.value = ""; evOneShot.checked = false;
    toggleMode(); await loadEvents();
  }
  async function deleteEvent(id) {
    const res = await fetch(`/api/timeline/${id}`, { method: "DELETE" });
    if (!res.ok) return;
    await loadEvents();
  }

  function toggleMode(){
    if (evOneShot.checked){
      evSingleWrap.classList.remove("hidden");
      evRecurringWrap.classList.add("hidden");
    } else {
      evSingleWrap.classList.add("hidden");
      evRecurringWrap.classList.remove("hidden");
    }
  }
  evOneShot.addEventListener("change", toggleMode);
  toggleMode();

  evSaveBtn.addEventListener("click", () => {
    let payload = {
      event_type: evType.value,
      title: evTitle.value,
      notes: evNotes.value,
      indications: evIndications.value,
      one_shot: evOneShot.checked,
    };
    if (evOneShot.checked){
      const atDay = parseInt(evAtDay.value ?? "",10);
      if (!Number.isInteger(atDay) || atDay < 0){alert("Inserisci giorno valido");return;}
      payload.at_day = atDay;
      payload.window_days = evWindowDays.value ? parseInt(evWindowDays.value,10) : null;
      payload.repeat_every_days = null; payload.start_day = null; payload.stop_day = null;
    } else {
      const every = parseInt(evRepeatEveryDays.value ?? "",10);
      const startD = parseInt(evStartDay.value ?? "",10);
      const stopD = evStopDay.value !== "" ? parseInt(evStopDay.value,10) : null;
      if (!Number.isInteger(every)||every<=0){alert("Inserisci ogni N giorni valido");return;}
      if (!Number.isInteger(startD)||startD<0){alert("Inserisci da giorno valido");return;}
      if (stopD!=null && (stopD<startD)){alert("A giorno deve essere ≥ Da giorno");return;}
      payload.at_day = null;
      payload.repeat_every_days = every; payload.start_day = startD; payload.stop_day = stopD;
      payload.window_days = evWindowDaysR.value ? parseInt(evWindowDaysR.value,10) : null;
    }
    showPwdModal({ type: "create", payload });
  });

  tlEventsList.addEventListener("click", (e) => {
    const btn = e.target.closest(".tlDeleteBtn");
    if (!btn) return;
    const id = btn.getAttribute("data-id");
    showPwdModal({ type: "delete", payload: { id } });
  });

  tlRefreshBtn.addEventListener("click", renderTimeline);

  if (STUDY_ID) loadEvents();
})();
</script>
</body>
</html>
