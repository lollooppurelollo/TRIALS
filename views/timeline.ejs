<!DOCTYPE html>
<html lang="it">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Timeline Studio</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    :root{
      --color-sage:#9baf93;
      --color-light-sage:#c7d2c1;
      --color-dark-sage:#6c7e63;
      --color-dark-gray:#4a5568;
      --color-blue:#bfdbfe;        /* radiology */
      --color-orange:#fdba74;      /* therapy */
      --color-gray:#e5e7eb;        /* custom */
      --color-light-red:#fecaca;   /* blood test */
    }
    .bg-sage{background-color:var(--color-sage)}
    .bg-light-sage{background-color:var(--color-light-sage)}
    .bg-dark-sage{background-color:var(--color-dark-sage)}
    .text-dark-gray{color:var(--color-dark-gray)}
    .hover\:bg-dark-sage:hover{background-color:var(--color-dark-sage)}

    /* chip colori evento */
    .chip{
      font-size:.65rem; line-height:1.05;
      padding:.15rem .4rem; border-radius:.375rem;
      display:inline-block; white-space:nowrap;
      max-width:100%;
      overflow:hidden;
      text-overflow:ellipsis;
    }
    .chip-oncological_visit{background:var(--color-dark-sage); color:#fff}
    .chip-blood_test{background:var(--color-light-red); color:#7f1d1d}
    .chip-radiology{background:var(--color-blue); color:var(--color-dark-gray)}
    .chip-therapy{background:var(--color-orange); color:var(--color-dark-gray)}
    .chip-custom{background:var(--color-gray); color:var(--color-dark-gray)}
    /* chip “finestra ± giorni” (stesso colore, più chiaro) */
    .chip-win{opacity:0.4}

    /* GRID settimana: prima colonna fissa + 7 giorni */
    .grid-week{
      display:grid;
      grid-template-columns: 3rem repeat(7, minmax(0, 1fr));
      gap:.5rem;
    }

    /* celle calendario */
    .daycell{min-height:60px; border-radius:.5rem; border:1px solid #e5e7eb; display:flex; align-items:center; justify-content:center; padding:.20rem; cursor:pointer}
    .daycell:hover{outline:2px solid var(--color-light-sage)}
    .daycell.selected{outline:3px solid var(--color-sage)}
    .daycell-stack{display:flex; gap:.25rem; flex-wrap:wrap; justify-content:center; width:100%}

    /* colonna label settimana (solo numero) */
    .weeklabel{font-size:.85rem; color:#6b7280; display:flex; align-items:center; justify-content:flex-end; padding-right:.25rem; font-weight:600}

    /* header giorni (1–7) più piccolo */
    .daynum{font-size:.8rem; color:#9ca3af; font-weight:600}

    /* card evento a destra */
    .event-card{border:1px solid #e5e7eb; border-left-width:8px; border-radius:.75rem; background:#fff; padding:.75rem 1rem}
    .event-left-oncological_visit{border-left-color:var(--color-dark-sage)}
    .event-left-blood_test{border-left-color:var(--color-light-red)}
    .event-left-radiology{border-left-color:var(--color-blue)}
    .event-left-therapy{border-left-color:var(--color-orange)}
    .event-left-custom{border-left-color:var(--color-gray)}
  </style>
</head>
<body class="bg-gray-100 text-gray-800">

<!-- Header -->
<div class="bg-white p-6 rounded-xl shadow-md mb-6">
  <div class="flex items-start justify-between gap-4 flex-wrap">
    <div>
      <h1 class="text-2xl font-bold text-dark-sage">Timeline Studio</h1>
      <p class="text-gray-600 text-sm">Gestione degli eventi per lo studio selezionato.</p>
    </div>

    <!-- Toggle modalità modifica -->
    <button id="tlEditToggleBtn"
            class="bg-sage text-white font-semibold px-4 py-2 rounded-lg hover:bg-dark-sage transition-colors shadow-md">
      Entra in modalità modifica
    </button>
  </div>

  <!-- legenda tipi -->
  <div class="mt-4 text-sm">
    <div class="flex items-center gap-2 flex-wrap">
      <span class="chip chip-oncological_visit">Visita oncologica</span>
      <span class="chip chip-blood_test">Esami ematici</span>
      <span class="chip chip-radiology">Radiologia</span>
      <span class="chip chip-therapy">Terapia</span>
      <span class="chip chip-custom">Custom</span>
    </div>
  </div>
</div>

<!-- Controlli timeline -->
<div class="bg-white p-4 rounded-xl shadow-md mb-6">
  <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
    <div>
      <label class="block text-sm font-medium text-dark-gray">Settimane totali</label>
      <input id="tlTotalWeeks" type="number" min="4" max="104" value="24"
             class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-light-sage">
    </div>
    <div>
      <label class="block text-sm font-medium text-dark-gray">Settimane per ciclo</label>
      <input id="tlCycleWeeks" type="number" min="1" max="12" value="4" disabled
             class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-light-sage">
    </div>
    <div class="flex items-end">
      <button id="tlRefreshBtn"
              class="w-full bg-sage text-white font-semibold px-4 py-2 rounded-lg hover:bg-dark-sage transition-colors shadow-md">
        Aggiorna
      </button>
    </div>
  </div>
</div>

<!-- Layout 2 colonne -->
<div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
  <!-- Timeline -->
  <section class="bg-white p-4 rounded-xl shadow-md">
    <h2 class="text-lg font-bold text-dark-gray mb-3">Timeline</h2>
    <div id="tlTimeline" class="space-y-4"></div>
  </section>

  <!-- Piano Eventi + Form -->
  <section class="space-y-6">
    <!-- Piano eventi -->
    <div class="bg-white p-4 rounded-xl shadow-md">
      <div class="flex items-center justify-between mb-3">
        <h2 class="text-lg font-bold text-dark-gray">Piano eventi</h2>
        <span id="tlNoEventsMsg" class="text-sm text-gray-500 hidden">Nessun evento salvato.</span>
      </div>
      <div id="tlEventsList" class="space-y-3"></div>
    </div>

    <!-- Form nuovo/modifica evento (visibile solo in modalità modifica) -->
    <div id="evFormWrap" class="bg-white p-4 rounded-xl shadow-md hidden">
      <h2 id="evFormTitle" class="text-lg font-bold text-dark-gray mb-3">Aggiungi evento</h2>

      <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
        <div class="md:col-span-2">
          <label class="block text-sm font-medium text-dark-gray">Tipo di evento</label>
          <select id="evType" class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-light-sage">
            <option value="oncological_visit">Visita oncologica</option>
            <option value="blood_test">Esami ematici</option>
            <option value="radiology">Esami radiologici</option>
            <option value="therapy">Terapia</option>
            <option value="custom">Evento personalizzato</option>
          </select>
        </div>

        <div class="md:col-span-2">
          <label class="block text-sm font-medium text-dark-gray">Titolo (opzionale)</label>
          <input id="evTitle" type="text" class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-light-sage">
        </div>

        <div class="md:col-span-2">
          <label class="block text-sm font-medium text-dark-gray">Note (opzionale)</label>
          <textarea id="evNotes" class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-light-sage"></textarea>
        </div>

        <div class="md:col-span-2">
          <label class="block text-sm font-medium text-dark-gray">Indicazioni (opzionale)</label>
          <textarea id="evIndications" class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-light-sage"></textarea>
        </div>

        <!-- toggle -->
        <div class="md:col-span-2 flex items-center gap-2">
          <input id="evOneShot" type="checkbox" class="rounded">
          <label for="evOneShot" class="text-sm text-dark-gray">Evento singolo</label>
          <span class="text-xs text-gray-400">(se non spuntato: evento ricorrente)</span>
        </div>

        <!-- singolo -->
        <div id="evSingleWrap" class="md:col-span-2 hidden">
          <!-- allineamento: inputs in basso -->
          <div class="grid grid-cols-1 md:grid-cols-3 gap-3 items-end">
            <div>
              <label class="block text-sm font-medium text-dark-gray">Giorno (da inizio studio)</label>
              <input id="evAtDay" type="number" min="0" class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-light-sage">
              <p class="text-xs text-gray-500 mt-1">Suggerimento: clicca un giorno nel calendario per precompilare.</p>
            </div>
            <div>
              <label class="block text-sm font-medium text-dark-gray leading-tight">Finestra indietro (−g, opz.)</label>
              <input id="evWindowBefore" type="number" min="0" class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-light-sage">
            </div>
            <div>
              <label class="block text-sm font-medium text-dark-gray leading-tight">Finestra avanti (+g, opz.)</label>
              <input id="evWindowAfter" type="number" min="0" class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-light-sage">
            </div>
          </div>
        </div>

        <!-- ricorrente -->
        <div id="evRecurringWrap" class="md:col-span-2">
          <!-- allineamento: 5 colonne + items-end -->
          <div class="grid grid-cols-1 md:grid-cols-5 gap-3 items-end">
            <div>
              <label class="block text-sm font-medium text-dark-gray">Ogni N giorni</label>
              <input id="evRepeatEveryDays" type="number" min="1" class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-light-sage">
            </div>
            <div>
              <label class="block text-sm font-medium text-dark-gray">Da giorno</label>
              <!-- Input 1 -> indice 0 interno -->
              <input id="evStartDay" type="number" min="1" class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-light-sage">
            </div>
            <div>
              <label class="block text-sm font-medium text-dark-gray">A giorno (opz.)</label>
              <!-- 1-based per coerenza con "Da giorno" -->
              <input id="evStopDay" type="number" min="1" class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-light-sage">
            </div>
            <div>
              <label class="block text-sm font-medium text-dark-gray leading-tight">Finestra indietro (−g, opz.)</label>
              <input id="evWindowBeforeR" type="number" min="0" class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-light-sage">
            </div>
            <div>
              <label class="block text-sm font-medium text-dark-gray leading-tight">Finestra avanti (+g, opz.)</label>
              <input id="evWindowAfterR" type="number" min="0" class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:ring-2 focus:ring-light-sage">
            </div>
          </div>
        </div>
      </div>

      <!-- Bottoni del form -->
      <div class="flex gap-2 mt-4">
        <button id="evSaveBtn"
                class="flex-1 bg-sage text-white font-semibold px-4 py-2 rounded-xl hover:bg-dark-sage transition-colors shadow-md">
          Salva evento
        </button>
        <button id="evCancelEditBtn"
                class="hidden px-4 py-2 rounded-lg border border-gray-300 text-gray-700">
          Annulla modifica
        </button>
      </div>
    </div> <!-- /#evFormWrap -->
  </section>
</div>

<!-- Modale password (usata solo per entrare/uscire dalla modalità modifica) -->
<div id="tlPasswordModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 hidden items-center justify-center z-50">
  <div class="bg-white p-6 rounded-lg shadow-xl w-80">
    <h3 class="text-lg font-bold mb-4">Inserisci la password</h3>
    <input type="password" id="tlPasswordInput" class="w-full p-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-sage" />
    <p id="tlPasswordError" class="text-red-400 text-sm mt-2 hidden">Password errata.</p>
    <div class="flex justify-end mt-4 space-x-2">
      <button id="tlCancelPwdBtn" class="bg-gray-300 text-gray-800 font-bold py-2 px-4 rounded-lg">Annulla</button>
      <button id="tlConfirmPwdBtn" class="bg-sage text-white font-bold py-2 px-4 rounded-lg">Conferma</button>
    </div>
  </div>
</div>

<script>
(() => {
  const STUDY_ID = "<%= typeof studyId !== 'undefined' ? studyId : '' %>";

  /* -------------- Helpers -------------- */
  const chipClass = (t) => ({
    oncological_visit: "chip chip-oncological_visit",
    blood_test: "chip chip-blood_test",
    radiology: "chip chip-radiology",
    therapy: "chip chip-therapy",
    custom: "chip chip-custom",
  }[t] || "chip chip-custom");

  const titleByType = (t) => ({
    oncological_visit: "Visita oncologica",
    blood_test: "Esami ematici",
    radiology: "Esami radiologici",
    therapy: "Terapia",
    custom: "Evento",
  }[t] || "Evento");

  function eventTitle(ev) {
    return ev.title?.trim() ? ev.title : titleByType(ev.event_type);
  }

  /* -------------- DOM refs -------------- */
  const tlTimeline = document.getElementById("tlTimeline");
  const tlEventsList = document.getElementById("tlEventsList");
  const tlNoEventsMsg = document.getElementById("tlNoEventsMsg");
  const tlRefreshBtn = document.getElementById("tlRefreshBtn");
  const tlEditToggleBtn = document.getElementById("tlEditToggleBtn");
  const tlTotalWeeks = document.getElementById("tlTotalWeeks");
  const tlCycleWeeks = document.getElementById("tlCycleWeeks");

  const evFormWrap = document.getElementById("evFormWrap");
  const evFormTitle = document.getElementById("evFormTitle");
  const evCancelEditBtn = document.getElementById("evCancelEditBtn");

  const evType = document.getElementById("evType");
  const evTitle = document.getElementById("evTitle");
  const evNotes = document.getElementById("evNotes");
  const evIndications = document.getElementById("evIndications");
  const evWindowBefore  = document.getElementById("evWindowBefore");
  const evWindowAfter   = document.getElementById("evWindowAfter");
  const evWindowBeforeR = document.getElementById("evWindowBeforeR");
  const evWindowAfterR  = document.getElementById("evWindowAfterR");
  const evOneShot = document.getElementById("evOneShot");
  const evAtDay = document.getElementById("evAtDay");
  const evRepeatEveryDays = document.getElementById("evRepeatEveryDays");
  const evStartDay = document.getElementById("evStartDay");
  const evStopDay = document.getElementById("evStopDay");
  const evSaveBtn = document.getElementById("evSaveBtn");

  const tlPwdModal = document.getElementById("tlPasswordModal");
  const tlPwdInput = document.getElementById("tlPasswordInput");
  const tlPwdError = document.getElementById("tlPasswordError");
  const tlCancelPwdBtn = document.getElementById("tlCancelPwdBtn");
  const tlConfirmPwdBtn = document.getElementById("tlConfirmPwdBtn");

  const evSingleWrap = document.getElementById("evSingleWrap");
  const evRecurringWrap = document.getElementById("evRecurringWrap");

  /* -------------- Stato -------------- */
  let _events = [];
  let _editMode = false;
  let _pendingAction = null;
  let _selectedDay = null;
  let _editingEvent = null; // se non null → siamo in modifica (DELETE+POST)
  let _cycleWeeksDb = null; // valore cycle_weeks letto dal DB

  /* -------------- Password: solo ingresso/uscita edit mode -------------- */
  function showPwdModal(action) {
    _pendingAction = action;
    tlPwdInput.value = "";
    tlPwdError.classList.add("hidden");
    tlPwdModal.classList.remove("hidden");
    tlPwdModal.classList.add("flex");
  }
  function hidePwdModal() {
    tlPwdModal.classList.add("hidden");
    tlPwdModal.classList.remove("flex");
  }
  function runPendingAction(action) {
    if (action.type === "enter-edit") {
      _editMode = true;
      evFormWrap.classList.remove("hidden");
      tlEditToggleBtn.textContent = "Esci e salva modifiche";
      tlCycleWeeks.disabled = false; 
    }
    if (action.type === "exit-edit") {
      _editMode = false;
      evFormWrap.classList.add("hidden");
      tlEditToggleBtn.textContent = "Entra in modalità modifica";
      // se il valore è cambiato, salva su DB
        const current = parseInt(tlCycleWeeks.value || "4", 10);
        if (_cycleWeeksDb == null || current !== _cycleWeeksDb) {
          saveStudySettings(current).then((ok) => {
            if (ok) {
              renderTimeline(); // ridisegna con il nuovo ciclo
            }
          });
        }

        resetForm();
        tlCycleWeeks.disabled = true;
      }
    _pendingAction = null;
    renderEventsList();
  }
  tlCancelPwdBtn.addEventListener("click", hidePwdModal);
  tlConfirmPwdBtn.addEventListener("click", () => {
    if (tlPwdInput.value === "TRIAL") {
      hidePwdModal();
      if (_pendingAction) runPendingAction(_pendingAction);
    } else {
      tlPwdError.classList.remove("hidden");
    }
  });
  tlEditToggleBtn.addEventListener("click", () => {
    if (!_editMode) showPwdModal({ type: "enter-edit" });
    else showPwdModal({ type: "exit-edit" });
  });

  /* -------------- Lista eventi (card) -------------- */
  function formatSummary(ev) {
    // Fallback per record vecchi: se c'è solo window_days, usalo per entrambi
    const wb = (ev.window_before_days ?? ev.window_days ?? 0) | 0; // indietro
    const wa = (ev.window_after_days  ?? ev.window_days ?? 0) | 0; // avanti
    const parts = [];
    if (wa) parts.push(`+${wa}g`);
    if (wb) parts.push(`-${wb}g`);
    const winText = parts.length ? ` (${parts.join(" / ")})` : "";

    if (ev.one_shot) {
      const d = ev.at_day;
      if (d == null) return "Evento singolo";
      const w = Math.floor(d / 7);
      const dow = (d % 7) + 1;
      return `Giorno ${d + 1} — Settimana ${w}, Giorno ${dow}${winText}`;
    } else {
      const sd = ev.start_day != null ? ev.start_day + 1 : 1;   // 1-based in output
      const ed = ev.stop_day  != null ? ev.stop_day  + 1 : null; // 1-based in output
      const rng = ed != null ? `giorni ${sd}-${ed}` : `dal giorno ${sd}`;
      return `Ogni ${ev.repeat_every_days} giorni, ${rng}${winText}`;
    }
  }

  function renderEventsList() {
    tlEventsList.innerHTML = "";
    if (!_events.length) {
      tlNoEventsMsg.classList.remove("hidden");
      return;
    }
    tlNoEventsMsg.classList.add("hidden");

    _events.forEach(ev => {
      const card = document.createElement("div");
      card.className = `event-card event-left-${ev.event_type}`;
      card.innerHTML = `
        <div class="flex justify-between gap-3">
          <div>
            <div class="font-bold text-dark-gray">${eventTitle(ev)}</div>
            <div class="text-sm text-gray-600">${formatSummary(ev)}</div>
          </div>
          ${
            _editMode
            ? `<div class="flex items-center gap-2">
                 <button data-id="${ev.id}" class="tlEditBtn text-blue-600 text-sm" title="Modifica">✏️</button>
                 <button data-id="${ev.id}" class="tlDeleteBtn text-red-500 text-sm" title="Elimina">🗑️</button>
               </div>`
            : ""
          }
        </div>
        ${ev.notes ? `<div class="mt-1 text-sm text-gray-700">${ev.notes}</div>` : ""}
        ${ev.indications ? `<div class="mt-1 text-xs text-gray-500"><strong>Indicazioni:</strong> ${ev.indications}</div>` : ""}
      `;
      tlEventsList.appendChild(card);
    });
  }

  /* -------------- Pianificazione per giorni (timeline) -------------- */
  function makeSchedule(events, totalWeeks){
    const totalDays = totalWeeks*7;
    const byDay = new Map();   // dayIndex -> [events]
    const windows = new Map(); // dayIndex -> [events] (per chip sfumati)

    const push = (map, key, value) => {
      if (key < 0 || key >= totalDays) return;
      const arr = map.get(key) || [];
      arr.push(value);
      map.set(key, arr);
    };

    events.forEach(ev => {
      // Fallback: se esiste solo window_days (legacy) lo usiamo per entrambi
      const winBefore = parseInt(ev.window_before_days ?? ev.window_days ?? 0, 10) || 0; // indietro
      const winAfter  = parseInt(ev.window_after_days  ?? ev.window_days ?? 0, 10) || 0; // avanti

      if (ev.one_shot) {
        const d = Number.isInteger(ev.at_day) ? ev.at_day : null;
        if (d != null) {
          push(byDay, d, ev);
          for (let k = 1; k <= winBefore; k++) push(windows, d - k, ev);
          for (let k = 1; k <= winAfter;  k++) push(windows, d + k, ev);
        }
      } else {
        const startDay = Number.isInteger(ev.start_day) ? ev.start_day : 0;
        const stopDay  = Number.isInteger(ev.stop_day)  ? ev.stop_day  : (totalDays - 1);
        const step = Math.max(1, parseInt(ev.repeat_every_days || 1, 10));
        for (let d = startDay; d <= stopDay; d += step) {
          push(byDay, d, ev);
          for (let k = 1; k <= winBefore; k++) push(windows, d - k, ev);
          for (let k = 1; k <= winAfter;  k++) push(windows, d + k, ev);
        }
      }
    });

    return {byDay, windows};
  }

  function renderTimeline() {
    const total = Math.max(1, parseInt(tlTotalWeeks.value || "24", 10));
    const cycleWeeks = Math.max(1, parseInt(tlCycleWeeks.value || "4", 10));
    const {byDay, windows} = makeSchedule(_events, total);

    tlTimeline.innerHTML = "";

    for (let startW = 0, cycleIdx = 1; startW < total; startW += cycleWeeks, cycleIdx++) {
      const endW = Math.min(total - 1, startW + cycleWeeks - 1);

      const block = document.createElement("div");
      block.className = "rounded-lg border border-gray-200";

      const header = document.createElement("div");
      header.className = "px-4 py-2 bg-gray-50 rounded-t-lg";
      header.innerHTML = `<div class="font-semibold">Ciclo ${cycleIdx} (settimane ${startW}-${endW})</div>`;
      block.appendChild(header);

      const body = document.createElement("div");
      body.className = "p-3 space-y-2";

      /* intestazione colonna settimana + giorni 1..7 */
      const hdr = document.createElement("div");
      hdr.className = "grid-week";
      hdr.innerHTML = `
        <div class="daynum text-right pr-1">Settimana</div>
        ${[1,2,3,4,5,6,7].map(n=>`<div class="daynum text-center">${n}</div>`).join("")}
      `;
      body.appendChild(hdr);

      /* righe settimane del ciclo */
      for (let w=startW; w<=endW; w++){
        const row = document.createElement("div");
        row.className="grid-week items-start";

        const wlab = document.createElement("div");
        wlab.className="weeklabel";
        wlab.textContent = `${w}`;  // solo numero settimana
        row.appendChild(wlab);

        for (let dow=0; dow<7; dow++){
          const dayIndex = w*7 + dow;

          const cell = document.createElement("div");
          cell.className = "daycell";
          cell.dataset.dayIndex = String(dayIndex);

          const stack = document.createElement("div");
          stack.className="daycell-stack";

          /* Eventi del giorno (chip pieni) → titolo se presente */
          (byDay.get(dayIndex) || []).forEach(ev=>{
            const chip = document.createElement("span");
            chip.className = chipClass(ev.event_type);
            chip.textContent = eventTitle(ev);
            // Tooltip completo (titolo + note su nuova riga se presenti)
            chip.title = ev.notes && ev.notes.trim()
              ? `${eventTitle(ev)}\nNote: ${ev.notes}`
              : eventTitle(ev);
            stack.appendChild(chip);
          });

          /* Finestra (chip chiari) → solo colore, nessuna scritta */
          (windows.get(dayIndex) || []).forEach(ev=>{
            const chip = document.createElement("span");
            chip.className = chipClass(ev.event_type) + " chip-win";
            chip.textContent = ""; // niente testo (solo colore)
            // Anche qui tooltip utile
            chip.title = ev.notes && ev.notes.trim()
              ? `${eventTitle(ev)}\nNote: ${ev.notes}`
              : eventTitle(ev);
            stack.appendChild(chip);
          });

          cell.appendChild(stack);
          row.appendChild(cell);
        }

        body.appendChild(row);
      }

      block.appendChild(body);
      tlTimeline.appendChild(block);
    }

    /* click = seleziona giorno e precompila evento singolo */
    tlTimeline.querySelectorAll(".daycell").forEach(c=>{
      c.addEventListener("click", ()=>{
        tlTimeline.querySelectorAll(".daycell.selected").forEach(s=>s.classList.remove("selected"));
        c.classList.add("selected");
        _selectedDay = parseInt(c.dataset.dayIndex,10);
        evOneShot.checked = true;
        toggleMode();
        evAtDay.value = _selectedDay;
        const focusField = evWindowAfter || evWindowBefore;
        if (focusField) focusField.focus();
      });
    });
  }

  /* -------------- Fetch -------------- */
  async function loadEvents() {
    if (!STUDY_ID) return;
    const res = await fetch(`/api/timeline/${STUDY_ID}`);
    if (!res.ok) { console.error("Errore loadEvents:", res.status); return; }
    _events = await res.json();
    renderEventsList();
    renderTimeline();
  }

  async function createEvent(ev) {
    const res = await fetch(`/api/timeline/${STUDY_ID}`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(ev),
    });
    if (!res.ok) { alert("Errore salvataggio"); return false; }
    return true;
  }

  async function deleteEvent(id) {
    const res = await fetch(`/api/timeline/${id}`, { method: "DELETE" });
    if (!res.ok) { alert("Errore eliminazione"); return false; }
    return true;
  }
  async function loadStudySettings() {
    if (!STUDY_ID) return;
    const res = await fetch(`/api/studies/${STUDY_ID}`);
    if (!res.ok) {
      if (res.status === 404) {
        // Studio non presente: non è un errore fatale.
        _cycleWeeksDb = null;
        console.warn("Studio non trovato (404). Verrà creato al primo salvataggio.");
        return;
      }
      const txt = await res.text().catch(() => "");
      console.error("Errore loadStudySettings:", res.status, txt);
      return;
    }
    const study = await res.json();
    if (study && typeof study.cycle_weeks === "number") {
      _cycleWeeksDb = study.cycle_weeks;
      tlCycleWeeks.value = String(study.cycle_weeks);
    }
  }

  async function saveStudySettings(newCycleWeeks) {
    if (!STUDY_ID) return true;
    const res = await fetch(`/api/studies/${STUDY_ID}`, {
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ cycle_weeks: newCycleWeeks }),
    });

    if (!res.ok) {
      const txt = await res.text().catch(() => "");
      console.error("PATCH /api/studies failed:", res.status, txt);
      alert("Errore salvataggio settimane/ciclo");
      return false;
    }

    const updated = await res.json().catch(() => null);
    if (updated && typeof updated.cycle_weeks === "number") {
      _cycleWeeksDb = updated.cycle_weeks;
    }
    return true;
  }



  /* -------------- UI: toggle modalità (singolo/ricorrente) -------------- */
  function toggleMode(){
    if (evOneShot.checked){
      evSingleWrap.classList.remove("hidden");
      evRecurringWrap.classList.add("hidden");
    } else {
      evSingleWrap.classList.add("hidden");
      evRecurringWrap.classList.remove("hidden");
    }
  }
  evOneShot.addEventListener("change", toggleMode);
  toggleMode(); // default: ricorrente

  /* -------------- Gestione form: create / update (DELETE+POST) -------------- */
  function resetForm(){
    evFormTitle.textContent = "Aggiungi evento";
    evSaveBtn.textContent = "Salva evento";
    evCancelEditBtn.classList.add("hidden");
    _editingEvent = null;

    evType.value = "oncological_visit";
    evTitle.value = "";
    evNotes.value = "";
    evIndications.value = "";
    evOneShot.checked = false;
    evAtDay.value = "";
    evRepeatEveryDays.value = "";
    evStartDay.value = "";
    evStopDay.value = "";
    evWindowBefore.value  = "";
    evWindowAfter.value   = "";
    evWindowBeforeR.value = "";
    evWindowAfterR.value  = "";
    toggleMode();
  }

  evCancelEditBtn.addEventListener("click", resetForm);

  evSaveBtn.addEventListener("click", async () => {
    if (!_editMode) { alert("Entra in modalità modifica per aggiungere/modificare eventi."); return; }

    let payload = {
      event_type: evType.value,
      title: evTitle.value,
      notes: evNotes.value,
      indications: evIndications.value,
      one_shot: evOneShot.checked,
    };

    if (evOneShot.checked){
      const atDay = parseInt(evAtDay.value ?? "",10);
      if (!Number.isInteger(atDay) || atDay < 0){
        alert("Inserisci un 'Giorno da inizio studio' valido (>=0).");
        return;
      }
      payload.at_day = atDay;
      payload.window_before_days = evWindowBefore.value ? parseInt(evWindowBefore.value,10) : null;
      payload.window_after_days  = evWindowAfter.value  ? parseInt(evWindowAfter.value,10)  : null;
      payload.window_days = null; // (legacy)

      // azzera i campi ricorrenti
      payload.repeat_every_days = null;
      payload.start_day = null;
      payload.stop_day = null;
    } else {
      const every = parseInt(evRepeatEveryDays.value ?? "",10);
      const startD = parseInt(evStartDay.value ?? "",10);
      const stopD = evStopDay.value !== "" ? parseInt(evStopDay.value,10) : null;
      if (!Number.isInteger(every) || every<=0){
        alert("Inserisci 'Ogni N giorni' valido (>0).");
        return;
      }
      if (!Number.isInteger(startD) || startD<=0){
        alert("Inserisci 'Da giorno' valido (>=1).");
        return;
      }
      if (stopD!=null && (stopD<startD)){
        alert("'A giorno' deve essere ≥ di 'Da giorno'.");
        return;
      }
      payload.at_day = null;
      payload.repeat_every_days = every;
      payload.start_day = startD - 1;                 // 1-based → 0-based
      payload.stop_day = stopD != null ? stopD - 1 : null; // 1-based → 0-based
      payload.window_before_days = evWindowBeforeR.value ? parseInt(evWindowBeforeR.value,10) : null;
      payload.window_after_days  = evWindowAfterR.value  ? parseInt(evWindowAfterR.value,10)  : null;
      payload.window_days = null; // (legacy)
    }

    // UPDATE: delete + post
    if (_editingEvent) {
      const okDel = await deleteEvent(_editingEvent.id);
      if (!okDel) return;
      const okPost = await createEvent(payload);
      if (!okPost) return;
      resetForm();
      await loadEvents();
      return;
    }

    // CREATE
    const ok = await createEvent(payload);
    if (!ok) return;
    resetForm();
    await loadEvents();
  });

  // azioni su lista eventi
  tlEventsList.addEventListener("click", async (e) => {
    if (e.target.closest(".tlDeleteBtn")) {
      if (!_editMode) return;
      const id = e.target.closest(".tlDeleteBtn").getAttribute("data-id");
      const ok = await deleteEvent(id);
      if (ok) await loadEvents();
      return;
    }
    if (e.target.closest(".tlEditBtn")) {
      if (!_editMode) return;
      const id = e.target.closest(".tlEditBtn").getAttribute("data-id");
      const ev = _events.find(x => x.id === id);
      if (!ev) return;

      _editingEvent = ev;
      evFormTitle.textContent = "Modifica evento";
      evSaveBtn.textContent = "Aggiorna evento";
      evCancelEditBtn.classList.remove("hidden");

      evType.value = ev.event_type;
      evTitle.value = ev.title || "";
      evNotes.value = ev.notes || "";
      evIndications.value = ev.indications || "";
      evOneShot.checked = !!ev.one_shot;
      toggleMode();

      // fallback: se il record ha solo window_days (legacy), lo usiamo per entrambi
      const wb = ev.window_before_days ?? ev.window_days ?? "";
      const wa = ev.window_after_days  ?? ev.window_days ?? "";

      if (ev.one_shot) {
        evAtDay.value = ev.at_day ?? "";
        evWindowBefore.value = wb ?? "";
        evWindowAfter.value  = wa ?? "";
      } else {
        evRepeatEveryDays.value = ev.repeat_every_days ?? "";
        evStartDay.value = ev.start_day != null ? ev.start_day + 1 : ""; // 1-based in edit
        evStopDay.value  = ev.stop_day  != null ? ev.stop_day  + 1 : ""; // 1-based in edit
        evWindowBeforeR.value = wb ?? "";
        evWindowAfterR.value  = wa ?? "";
      }
    }
  });

  /* -------------- Altri handler -------------- */
  tlRefreshBtn.addEventListener("click", async () => {
    // Se sei in modalità modifica, salva anche su DB
    if (_editMode) {
      const current = parseInt(tlCycleWeeks.value || "4", 10);
      const ok = await saveStudySettings(current); // PATCH /api/studies/:id
      if (!ok) return;            // se fallisce, non ridisegnare
      _cycleWeeksDb = current;    // aggiorna cache locale
    }
    renderTimeline();             // ridisegna la griglia
  });

  tlCycleWeeks.addEventListener("change", async () => {
    if (!_editMode) return;                 // salviamo solo in edit mode
    const current = parseInt(tlCycleWeeks.value || "4", 10);
    const ok = await saveStudySettings(current);
    if (ok) _cycleWeeksDb = current;
  });


  // Selezione giorno sulla griglia → precompila evento singolo
  tlTimeline.addEventListener("click", (e) => {
    const cell = e.target.closest(".daycell");
    if (!cell) return;
    const dayIndex = parseInt(cell.dataset.dayIndex, 10);
    if (Number.isInteger(dayIndex)) {
      _selectedDay = dayIndex;
      evOneShot.checked = true;
      toggleMode();
      evAtDay.value = _selectedDay;
      const focusField = evWindowAfter || evWindowBefore;
      if (focusField) focusField.focus();
    }
  });

  /* -------------- Start -------------- */
  if (STUDY_ID) {
  loadStudySettings().then(loadEvents);
  }
})();
</script>
</body>
</html>
