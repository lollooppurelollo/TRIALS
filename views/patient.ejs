<style>
    /* Stili personalizzati per il colore salvia */
    .bg-sage { background-color: #8D9F8E; }
    .hover\:bg-dark-sage:hover { background-color: #6C7A6D; }
    .text-dark-sage { color: #6C7A6D; }
    .peer-checked\:bg-sage:checked { background-color: #8D9F8E; }
    .focus\:ring-light-sage:focus { --tw-ring-color: #B8C7B9; }

    /* Stili per il messaggio di non eleggibilità */
    .bg-light-red { background-color: #F8D7DA; }
    .text-dark-red { color: #721C24; }

    /* Stili per il modal */
    .modal-content {
        max-height: 80vh;
        overflow-y: auto;
    }
</style>

<div class="bg-white p-8 rounded-xl shadow-md mb-8">
    <h1 class="text-2xl font-bold text-dark-sage mb-4">Ricerca Studi Clinici</h1>
    <p class="text-gray-600 mb-6">Inserisci i criteri per trovare gli studi clinici disponibili.</p>

    <form id="searchForm" class="space-y-4">
        <div>
            <label for="clinicalArea" class="block text-sm font-medium text-dark-gray">Area Clinica di interesse</label>
            <select id="clinicalArea" name="clinicalArea" class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-light-sage" required>
                <option value="" disabled selected>Seleziona un'area</option>
                <option value="Mammella">Mammella</option>
                <option value="Polmone">Polmone</option>
                <option value="Gastro-Intestinale">Gastro-Intestinale</option>
                <option value="Ginecologico">Ginecologico</option>
                <option value="Prostata e Vie Urinarie">Prostata e Vie Urinarie</option>
                <option value="Melanoma e Cute">Melanoma e Cute</option>
                <option value="Testa-Collo">Testa-Collo</option>
                <option value="Fase 1">Fase 1</option>
                <option value="Altro">Altro</option>
            </select>
        </div>
        <div id="specificClinicalAreaContainer" class="hidden">
            <label for="specificClinicalAreas" class="block text-sm font-medium text-dark-gray">Specifica Area Clinica di interesse</label>
            <select id="specificClinicalAreas" name="specificClinicalAreas" class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-light-sage">
                <option value="" disabled selected>Seleziona un'area specifica (opzionale)</option>
            </select>
        </div>
        <div>
            <label for="treatmentSetting" class="block text-sm font-medium text-dark-gray">Setting del Trattamento</label>
            <select id="treatmentSetting" name="treatmentSetting" class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-light-sage" required>
                <option value="" disabled selected>Seleziona un setting</option>
                <option value="Metastatico">Metastatico</option>
                <option value="Adiuvante">Adiuvante</option>
                <option value="Neo-adiuvante">Neo-adiuvante</option>
            </select>
        </div>
        <div id="treatmentLineContainer" class="hidden">
            <label for="patientTreatmentLine" class="block text-sm font-medium text-dark-gray">Linea di trattamento del paziente</label>
            <input type="number" id="patientTreatmentLine" name="patientTreatmentLine" class="mt-1 p-2 w-full border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-light-sage" placeholder="Esempio: 2">
        </div>

        <button type="submit" class="w-full bg-sage text-white font-bold p-3 rounded-lg hover:bg-dark-sage transition-colors shadow-md">
            Cerca
        </button>
    </form>
</div>

<div id="searchResults" class="mt-8">
    <h2 class="text-xl font-bold text-dark-sage mb-4">Studi compatibili</h2>
    <div id="trialList" class="space-y-4">
        <!-- I risultati verranno iniettati qui -->
    </div>
</div>

<!-- Modal Dettagli Studio -->
<div id="studyDetailModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden">
    <div class="relative mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-xl bg-white mt-20">
        <div class="mt-3 text-center">
            <h3 class="text-lg leading-6 font-medium text-dark-gray" id="modalTitle"></h3>
            <p class="text-sm text-gray-500" id="modalSubtitle"></p>
            <div class="mt-4 px-7 py-3 modal-content">
                <h4 class="font-bold text-dark-gray mb-2">Criteri di I/E</h4>
                <div class="flex flex-col space-y-2" id="criteriaContainer">
                    <!-- I criteri verranno iniettati qui -->
                </div>
            </div>
            <div class="items-center px-4 py-3">
                <button id="checkEligibilityBtnInModal" class="px-4 py-2 bg-sage text-white text-base font-medium rounded-lg w-full shadow-md hover:bg-dark-sage focus:outline-none focus:ring-2 focus:ring-sage transition-colors">
                    Controlla eleggibilità
                </button>
                <div id="eligibilityResultDiv" class="font-bold text-center mt-4 hidden p-3 rounded-lg"></div>
                <button id="closeModalBtn" class="mt-4 px-4 py-2 bg-gray-300 text-dark-gray text-base font-medium rounded-lg w-full shadow-md hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-300 transition-colors">
                    Chiudi
                </button>
            </div>
        </div>
    </div>
</div>

<script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
    import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
    import { getFirestore, onSnapshot, collection, query, where, getDocs } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

    const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
    const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
    const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

    const app = initializeApp(firebaseConfig);
    const db = getFirestore(app);
    const auth = getAuth(app);
    let userId = null;
    let isAuthReady = false;

    // Elementi del DOM
    const searchForm = document.getElementById('searchForm');
    const trialListEl = document.getElementById('trialList');
    const studyDetailModal = document.getElementById('studyDetailModal');
    const closeModalBtn = document.getElementById('closeModalBtn');
    const checkEligibilityBtnInModal = document.getElementById('checkEligibilityBtnInModal');
    const eligibilityResultDiv = document.getElementById('eligibilityResultDiv');

    const criteriaContainer = document.getElementById('criteriaContainer');

    // Variabili per i dati
    let allStudies = [];
    let patientCriteriaMap = new Map();

    async function initFirebase() {
        try {
            if (initialAuthToken) {
                await signInWithCustomToken(auth, initialAuthToken);
            } else {
                await signInAnonymously(auth);
            }
        } catch (error) {
            console.error("Firebase Auth Error:", error);
        }
    }

    onAuthStateChanged(auth, async (user) => {
        if (user) {
            userId = user.uid;
            isAuthReady = true;
            console.log("Utente autenticato. ID:", userId);
            fetchPatientCriteria();
        } else {
            userId = null;
            isAuthReady = true;
            console.log("Utente non autenticato. Utilizzo ID anonimo.");
        }
    });

    // Funzione per recuperare i criteri del paziente
    function fetchPatientCriteria() {
        if (!isAuthReady) return;

        const criteriaCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/criteria`);

        onSnapshot(criteriaCollectionRef, (querySnapshot) => {
            patientCriteriaMap.clear();
            querySnapshot.forEach(doc => {
                const criteria = doc.data();
                patientCriteriaMap.set(criteria.text, false);
            });
            console.log("Criteri paziente caricati:", patientCriteriaMap);
        }, (error) => {
            console.error("Errore nel recupero dei criteri:", error);
        });
    }

    // Funzione per la ricerca degli studi
    searchForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        if (!isAuthReady) return;

        const clinicalArea = document.getElementById('clinicalArea').value;
        const treatmentSetting = document.getElementById('treatmentSetting').value;
        const patientTreatmentLine = document.getElementById('patientTreatmentLine').value;

        trialListEl.innerHTML = '<p class="text-center text-gray-500">Ricerca in corso...</p>';

        try {
            const studiesCollectionRef = collection(db, `artifacts/${appId}/users/${userId}/studies`);
            let studiesQuery = query(studiesCollectionRef, 
                where("clinicalArea", "==", clinicalArea),
                where("treatmentSetting", "==", treatmentSetting)
            );

            const querySnapshot = await getDocs(studiesQuery);
            allStudies = [];

            if (querySnapshot.empty) {
                trialListEl.innerHTML = '<p class="text-center text-gray-500">Nessuno studio compatibile trovato.</p>';
                return;
            }

            querySnapshot.forEach(doc => {
                const study = { id: doc.id, ...doc.data() };
                allStudies.push(study);
            });

            renderStudies(allStudies);

        } catch (error) {
            console.error("Errore durante la ricerca:", error);
            trialListEl.innerHTML = `<p class="text-center text-red-500">Si è verificato un errore durante la ricerca.</p>`;
        }
    });

    function renderStudies(studies) {
        trialListEl.innerHTML = '';
        studies.forEach(study => {
            const card = document.createElement('div');
            card.className = 'bg-white p-6 rounded-xl shadow-md cursor-pointer hover:shadow-lg transition-shadow';
            card.dataset.studyId = study.id;
            card.innerHTML = `
                <h3 class="text-lg font-bold text-dark-sage">${study.title}</h3>
                <p class="text-sm text-gray-600">${study.subtitle}</p>
            `;
            card.addEventListener('click', () => openStudyDetailModal(study.id));
            trialListEl.appendChild(card);
        });
    }

    function openStudyDetailModal(studyId) {
        const study = allStudies.find(s => s.id === studyId);
        if (!study) return;

        document.getElementById('modalTitle').textContent = study.title;
        document.getElementById('modalSubtitle').textContent = study.subtitle;
        criteriaContainer.innerHTML = '';
        eligibilityResultDiv.textContent = '';
        eligibilityResultDiv.classList.add('hidden');

        // Render criteria
        if (study.inclusionCriteria && study.inclusionCriteria.length > 0) {
            const inclusionTitle = document.createElement('h5');
            inclusionTitle.className = 'text-md font-bold text-dark-gray mt-4';
            inclusionTitle.textContent = 'Criteri di Inclusione';
            criteriaContainer.appendChild(inclusionTitle);
            study.inclusionCriteria.forEach(criteria => {
                const criteriaDiv = document.createElement('div');
                criteriaDiv.className = 'flex items-center space-x-2';
                criteriaDiv.innerHTML = `<span class="text-gray-700 text-sm">- ${criteria}</span>`;
                criteriaContainer.appendChild(criteriaDiv);
            });
        }
        if (study.exclusionCriteria && study.exclusionCriteria.length > 0) {
            const exclusionTitle = document.createElement('h5');
            exclusionTitle.className = 'text-md font-bold text-dark-gray mt-4';
            exclusionTitle.textContent = 'Criteri di Esclusione';
            criteriaContainer.appendChild(exclusionTitle);
            study.exclusionCriteria.forEach(criteria => {
                const criteriaDiv = document.createElement('div');
                criteriaDiv.className = 'flex items-center space-x-2';
                criteriaDiv.innerHTML = `<span class="text-gray-700 text-sm">- ${criteria}</span>`;
                criteriaContainer.appendChild(criteriaDiv);
            });
        }

        checkEligibilityBtnInModal.dataset.studyId = studyId;
        studyDetailModal.classList.remove('hidden');
    }

    closeModalBtn.addEventListener('click', () => {
        studyDetailModal.classList.add('hidden');
    });

    // Logica di eleggibilità nel modal
    checkEligibilityBtnInModal.addEventListener('click', () => {
        const studyId = checkEligibilityBtnInModal.dataset.studyId;
        const study = allStudies.find(s => s.id === studyId);
        if (!study) {
            eligibilityResultDiv.textContent = 'Errore: studio non trovato.';
            eligibilityResultDiv.className = 'font-bold text-center mt-4 p-3 rounded-lg bg-red-200 text-red-800';
            eligibilityResultDiv.classList.remove('hidden');
            return;
        }

        const inclusionCriteriaMet = (study.inclusionCriteria || []).every(criteria => {
            const patientInput = document.querySelector(`input[data-criteria-name="${criteria}"]`);
            return patientInput && patientInput.checked;
        });

        const exclusionCriteriaMet = (study.exclusionCriteria || []).every(criteria => {
            const patientInput = document.querySelector(`input[data-criteria-name="${criteria}"]`);
            return !patientInput || !patientInput.checked;
        });

        if (inclusionCriteriaMet && exclusionCriteriaMet) {
            eligibilityResultDiv.textContent = `Paziente eleggibile per lo studio: ${study.title}`;
            eligibilityResultDiv.className = 'font-bold text-center mt-4 p-3 rounded-lg bg-sage text-white';
        } else {
            eligibilityResultDiv.textContent = `Paziente NON eleggibile per lo studio: ${study.title}`;
            eligibilityResultDiv.className = 'font-bold text-center mt-4 p-3 rounded-lg bg-light-red text-dark-red';
        }

        eligibilityResultDiv.classList.remove('hidden');
    });

    initFirebase();
</script>
